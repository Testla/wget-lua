# Adapted from Dockerfile
name: Build Wget-AT binary
run-name: Build ${{ github.ref }}
on: [push]
jobs:
  build-binary:
    runs-on: ubuntu-22.04
    container:
      # Buster is supported by LTS until 2024-06-30
      image: debian:buster-slim
      env:
        TLSTYPE: openssl
        LC_ALL: C
        APPIMAGE_EXTRACT_AND_RUN: 1
    steps:
      - name: Install build dependencies
        run: |
          set -eux
          case "${TLSTYPE}" in
            openssl) SSLPKG=libssl-dev;;
            gnutls) SSLPKG=gnutls-dev;;
            *) echo "Unknown TLSTYPE ${TLSTYPE}"; exit 1;;
          esac
          DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical apt-get -qqy --no-install-recommends -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-unsafe-io update
          DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical apt-get -qqy --no-install-recommends -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-unsafe-io upgrade
          DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical apt-get -qqy --no-install-recommends -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-unsafe-io install "${SSLPKG}" build-essential git bzip2 bash rsync gcc zlib1g-dev autoconf autoconf-archive flex make automake gettext libidn11 autopoint texinfo gperf ca-certificates wget pkg-config libpsl-dev libidn2-dev libluajit-5.1-dev libgpgme-dev libpcre2-dev git file

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache zstd files
        id: cache-zstd
        uses: actions/cache@v4
        with:
          # Seems we can't concatenate alias, so there is no good way other than
          # just duplicating.
          # Workflow runner keeps reporting "Cache not found for input keys:
          # zstd-1.4.4-debian:buster-slim", despite it being in the cache.
          # Removing the cache to refresh it.
          key: zstd-1.4.4-debian:buster-slim
          path: /tmp/zstd-*/

      - name: Download and build zstd
        if: steps.cache-zstd.outputs.cache-hit != 'true'
        run: |
          cd /tmp
          wget https://github.com/facebook/zstd/releases/download/v1.4.4/zstd-1.4.4.tar.gz
          tar xf zstd-1.4.4.tar.gz
          cd zstd-1.4.4
          make

      - name: Install zstd
        run: |
          cd /tmp/zstd-*/
          make install

      - name: Cache c-ares files
        id: cache-c-ares
        uses: actions/cache@v4
        with:
          key: c-ares-1.19.1-debian:buster-slim
          path: /tmp/c-ares-*/

      - name: Download and build c-ares
        if: steps.cache-c-ares.outputs.cache-hit != 'true'
        run: |
          cd /tmp
          wget https://github.com/c-ares/c-ares/releases/download/cares-1_19_1/c-ares-1.19.1.tar.gz
          tar xf c-ares-1.19.1.tar.gz
          cd c-ares-1.19.1
          ./configure
          make

      - name: Install c-ares
        run: |
          cd /tmp/c-ares-*/
          make install

      - name: Update ld cache
        run: ldconfig

      - name: Compile
        run: |
          git config --global --add safe.directory "$(pwd)"
          ./bootstrap
          ./configure --with-ssl="${TLSTYPE}" --with-cares --disable-nls
          make -j $(nproc)
          src/wget --help | grep -iE "gnu|warc|lua|dns|host|resolv"

      - name: Build AppImage
        run: |
          set -e
          mkdir -p .github/workflows/AppImage/appdir/usr/bin/
          cp src/wget .github/workflows/AppImage/appdir/usr/bin/
          cd .github/workflows/AppImage
          wget https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          ./linuxdeploy-x86_64.AppImage --appdir appdir --output appimage

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: |
            .github/workflows/AppImage/wget-AT-*.AppImage
